(These are my development notes to myself and not necessarily intended for any other purpose. - Kef)


Throughout this document, Racket refers to Racket 5.0.1 running the R5RS environment.


R5RS spec: http://www.schemers.org/Documents/Standards/R5RS/HTML/

Some notes here: http://community.schemewiki.org/?scheme-faq-standards

Understanding macros: http://www.xs4all.nl/~hipster/lib/scheme/gauche/define-syntax-primer.txt

dash (#python)'s parser generator: https://launchpad.net/pymeta

File structure of Python project: http://jcalderone.livejournal.com/39794.html

Should the Parser class support the 'with' statement (to ensure file always closes)?

Smart file handling that will always raise EOFError after hitting end of file (saves us from having to check for '' after every time we read) -- keeping track of line and column numbers would be nice, too

If we stick with Python 2.7 support, remember isinstance(0L, int) is False! (So is isinstance(0, long), for that matter.) Hence, there's no easy backportable way to check if something is an integer.

Constant folding?
* Test case: evaluate "7 7", check "results[0] is results[1]"

Test cases:
* Recursion limit (prefer a 'soft crash' rather than a hard crash caused by exhausting system memory)... for example, raise exception if the call stack grows to have more than N function calls. I don't yet know a good value for N. Maybe 1024?
* Tail recursion optimization
** Test when it should be applied (iterate a gazillion times)
** Test when it should NOT be applied (iterate a gazillion times and catch exception)
* Continuations can be invoked multiple times
* "One of [the most crucial aspects of the numeric tower], which is frequently overlooked, is that when encountering an overflow during some operation on exact numbers, Schemes MUST either return an inexact result or report an error; returning a bogus exact result is NOT an option."
** Probably not a problem for us... are there any types that can overflow at all?
* Return error on trying to modify a constant literal, e.g. with set-car!. (not required by standard)
* (assert-equal 12 ((if #f + *) 3 4))
* Dot-pairs in lambda: (lambda (the-car . the-cdr))
* Reject: ((quote +) 1 1)
* Reject define-syntax outside top level (req. by 5.3)
* Reject 'define' anywhere outside top level or beginning of body (req. by 5.2)
* "[you cannot] write a macro in a `nested position', i.e., an expression like ((foo x) y z) is always considered a procedure application."

<foof> you might want to grab the tests from chibi-scheme, they're divided into basic tests (procedure calls, closures, etc.), then r5rs tests, then library tests

R6RS test suite linked to here: http://www.r6rs.org/implementations.html


The way one Scheme interpreter was coded appears at the bottom of http://c2.com/cgi/wiki?RunAndReturnSuccessor


Implementation details
----------------------
Sometimes the standard leaves something up to the implementation: the implementation must do something, but doesn't say exactly what or how. These are the decisions we've made:


6.2.4: The standard specifies four precision levels for inexact numbers: "short, single, double, and long". All of them are mapped to Python floats.

6.3.5: "Scheme does not specify the effect of a backslash within a string that is not followed by a doublequote or backslash." Our implementation raises a syntax error. (It would be as easy to let the backslash pass through, but I figure that if the programmer wants a literal backslash, they should type two backslashes, as the standard specifies.) This is the behavior of Racket, except it allows common escape sequences such as \n.

"A string constant may continue from one line to the next, but the exact contents of such a string are unspecified." We simply incorporate the newline into the string, as does Racket.


Deliberate extensions
---------------------
These will be few, because, by and large, this implementation is intended to adhere exactly to the standard, no more, no less. However, some extensions make things considerably easier to implement, and the lack of certain extensions would be surprising (e.g., not recognizing tabs as whitespace):

* The entire Python foreign language interface
* R5RS 2.2 only requires accepting spaces and newlines as whitespace. We define whitespace as Python does: space, tab, CR, LF, form feed, vertical tab.


Quotation
---------
Notes from Racket:
    (number? 7)     => #t
    (number? '7)    => #t
    (number? ''7)   => #f
    (list? ''7)     => #t
    (car ''7)       => quote

R5RS 4.1.2 agrees.

Does R5RS allow parsing of e.g. "' ' banana" as "''banana"? Racket does.


Macros
------
Racket disallows evaluating a macro (as opposed to evaluating the invocation), just as it does with other built-in keywords.

Racket also shows that macros are clearly a compile-time construct:

    > (define (invoke1) (my-macro 1 2 3))
    > (define-syntax my-macro
        (syntax-rules ()
          ((my-macro a b c)
           a)))
    > (define (invoke2) (my-macro 1 2 3))
    > (invoke1)
    . reference to undefined identifier: my-macro
    > (invoke2)
    1


Another example:

    > (define (invoke1) (my-macro 1 2 3))
    > (define (my-macro x y z) 42)
    > (define-syntax my-macro
        (syntax-rules ()
          ((my-macro a b c)
           a)))
    > (define (invoke2) (my-macro 1 2 3))
    > (invoke1)
    42
    > (invoke2)
    1

As you can see, it's possible for a procedure and a macro to have the same name, though it's difficult to access the procedure when this is the case.


Closures
--------
In Racket:

> (let ((x 42))
    (let ((myfunc (lambda () x)))
      (set! x 37)
      (myfunc)))
37

Is this what supposed to happen, or is this not actually defined by the standard?

It seems to me that, assuming Racket's behavior is standard or at least permissible, a closure should simply hold a reference to each symbol table in the stack at the point it was defined, starting at the most local and ending at the global symbol table.


Terminology
-----------
What I currently call "Python macros" are not really macros, since they are evaluated at runtime. Maybe "runtime macro"? "Raw args procedures"?


Freakish stuff to take care of sometime
---------------------------------------
Arithmetic with strings:
    yap> (+ 1 "hello")

    [traceback: unsupported operand type(s) for +=: 'int' and 'str']

Doing things with None / weird use of define:
    yap> (define banana (define orange 1))

    yap> banana

    yap> (+ banana 1)

    [traceback: 'NoneType' object has no attribute 'value']
